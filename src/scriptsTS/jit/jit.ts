import { appendFileSync, readFileSync, readdirSync, statSync, writeFileSync } from "fs";
import path from "path";
import { cssFolder, packagePath } from "../builder/controller.js";
import { logger } from "../helpers/owlFs.js";
import { ClassesGenerated } from "../ClassesGenerated.js";
import { JitGenerated } from "./JitGenerated.js";
const colorsKeys = {
  bg: "background-color",
  text: "color",
  fill: "fill",
  border: "border-color",
  stroke: "stroke",
  "border-r": "border-right-color",
  "border-l": "border-left-color",
  "border-t": "border-top-color",
  "border-b": "border-bottom-color",
  p: "padding",
  m: "margin",
  w: "width",
  h: "height",
  minw: "min-width",
  minh: "min-height",
  maxw: "max-width",
  maxh: "max-height",
  "text-overflow": "text-overflow",
  "text-align": "text-align",
  "vertical-align": "vertical-align",
  "white-space": "white-space",
  "font-size": "font-size",
  "font-family": "font-family",
  "font-weight": "font-weight",
  "font-style": "font-style",
  "letter-spacing": "letter-spacing",
  "line-height": "line-height",
};
const newJitGenerated = {};
const filePath = process.argv[2];
logger(process.argv.slice(2), "argv");
logger(filePath, "filePath");

const customClassPatterns = {
  all: /([a-zA-Z0-9-:]+):\[([a-zA-Z0-9-,:#]+)\]/g,
  colors: /([a-zA-Z0-9-]+):#([a-zA-Z0-9-]+)/g,
  spacing: /([a-zA-Z0-9-]+):([0-9]+(px|rem|%|vw|vh|em|ch|ex|cm|mm|in|pt|pc))/g,
};

export const startGenerate = () => {
  let config = JSON.parse(readFileSync("./moon.config.json") as any);

  // const normalizedFilePath = path.normalize(filePath);
  // console.log(`File changed lol: ${normalizedFilePath}`);

  const projectDirectory = config.projectDir || "./src";
  logger(projectDirectory, "projectDirectory");
  function scanDirectory(directory) {
    const files = readdirSync(directory);
    files.forEach((file) => {
      try {
        const filePath = path.join(directory, file);
        const fileStat = statSync(filePath);
        if (fileStat.isDirectory()) {
          scanDirectory(filePath);
        } else if (fileStat.isFile() && /\.(js|jsx|ts|tsx)$/i.test(file)) {
          const fileContent = readFileSync(filePath, "utf8");
          // if (!fileContent.includes("bg:#fff")) return;
          logger(filePath, "filePath");
          extractActions(fileContent);
          extractColors(fileContent);
          extractSpacing(fileContent);
        }
      } catch (e) {
        logger(e, "error");
      }
    });
  }
  scanDirectory(projectDirectory);

  logger(newJitGenerated, "newJitGenerated");
  if (Object.keys(newJitGenerated).length) {
    const toWrite = { ...JitGenerated, ...newJitGenerated };
    logger(toWrite, "toWrite");
    writeFileSync(
      `${packagePath}/jit/JitGenerated.js`,
      `/* This file is generated by Moon Style. Do not edit it manually. */
      export const JitGenerated=${JSON.stringify(toWrite)}`
    );
    appendFileSync(`${cssFolder}/moon/moon.jit.css`, `\n${Object.values(newJitGenerated).join("\n")}`);
  }
};
// start point
startGenerate();

function extractActions(fileContent) {
  const pattern = customClassPatterns.all;
  const matchs = fileContent.match(pattern);
  logger(matchs, "matchs");
  matchs?.forEach((match) => {
    if (JitGenerated[match]) return;
    const data = match.split(":[");
    const rest = data[0].split(":");
    const classes = data[1].slice(0, -1).split(",");
    // const test = classes.join("\\,").replace(":", "\\:").replace("#", "\\#").replace("%", "\\%");
    const test = classes.join("\\,").split(":").join("\\:").split("#").join("\\#");
    const name = rest.join("\\:") + `\\:\\[${test}\\]:` + rest.join(":");
    const classesContent = classes
      .map((className) => {
        let v = ClassesGenerated[className];
        if (!v) {
          logger(className, "className");
          const [propName, colorValue] = className.split(":");
          v = `${colorsKeys[propName]}:${colorValue}`;
        }
        return `${v};`;
      })
      .join("");
    newJitGenerated[match] = `.${name}{${classesContent}}`;
  });
}
function extractColors(fileContent) {
  const pattern = customClassPatterns.colors;
  const matchs = fileContent.match(pattern);
  logger(matchs, "matchs");
  matchs?.forEach((match) => {
    if (JitGenerated[match]) return;
    const data = match.split(":");
    const propName = data[0];
    const colorValue = data[1];
    const name = `${propName}\\:\\${colorValue}`;
    const classesContent = `${colorsKeys[propName]}:${colorValue}`;
    newJitGenerated[match] = `.${name}{${classesContent}}`;
  });
}
function extractSpacing(fileContent) {
  const pattern = customClassPatterns.spacing;
  const matchs = fileContent.match(pattern);
  logger(matchs, "matchs");
  matchs?.forEach((match) => {
    if (JitGenerated[match]) return;
    const data = match.split(":");
    const propName = data[0];
    const colorValue = data[1];
    const name = `${propName}\\:${colorValue.replace("%", "\\%")}`;
    const classesContent = `${colorsKeys[propName]}:${colorValue}`;
    newJitGenerated[match] = `.${name}{${classesContent}}`;
  });
}

const test = () => {
  const fileContent = readFileSync("./src/vite/main.tsx", "utf8");
  try {
    extractActions(fileContent);
    extractColors(fileContent);
    extractSpacing(fileContent);
  } catch (e) {
    logger(e, "error");
  }
};
