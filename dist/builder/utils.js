export const getPropsNames = (propName) => {
    return PropsByName[propName] ?? [{ name: (n) => `${n}`, css: (v) => `${propName}:${v}` }];
};
export const hexToRGB = (hex) => {
    if (hex.length === 4)
        hex = hex.replace(/#(.)(.)(.)/, "#$1$1$2$2$3$3");
    return hex.length === 7 ? `${parseInt(hex.slice(1, 3), 16)}, ${parseInt(hex.slice(3, 5), 16)}, ${parseInt(hex.slice(5, 7), 16)}` : hex;
};
export const getDefaultName = (cssName) => {
    return ({
        padding: "p",
        margin: "m",
        width: "w",
        height: "h",
        color: "text",
        "background-color": "bg",
        "border-radius": "round",
        "border-width": "border",
        "border-color": "border",
        "box-shadow": "shadow",
        "font-size": "text",
        "line-height": "line-h",
        "letter-spacing": "spacing",
        "font-weight": "weight",
        "font-family": "font",
    }[cssName] ?? cssName);
};
const PropsByName = {
    padding: [
        { name: (n) => `${n}`, css: (v) => `padding:${v}` },
        { name: (n) => `${n}r`, css: (v) => `padding-right:${v}` },
        { name: (n) => `${n}l`, css: (v) => `padding-left:${v}` },
        { name: (n) => `${n}t`, css: (v) => `padding-top:${v}` },
        { name: (n) => `${n}b`, css: (v) => `padding-bottom:${v}` },
        { name: (n) => `${n}x`, css: (v) => `padding-inline:${v}` },
        { name: (n) => `${n}y`, css: (v) => `padding-block:${v}` },
        { name: (n) => `${n}s`, css: (v) => `padding-inline-start:${v}` },
        { name: (n) => `${n}e`, css: (v) => `padding-inline-end:${v}` },
    ],
    margin: [
        { name: (n) => `${n}`, css: (v) => `margin:${v}` },
        { name: (n) => `${n}r`, css: (v) => `margin-right:${v}` },
        { name: (n) => `${n}l`, css: (v) => `margin-left:${v}` },
        { name: (n) => `${n}t`, css: (v) => `margin-top:${v}` },
        { name: (n) => `${n}b`, css: (v) => `margin-bottom:${v}` },
        { name: (n) => `${n}x`, css: (v) => `margin-inline:${v}` },
        { name: (n) => `${n}y`, css: (v) => `margin-block:${v}` },
        { name: (n) => `${n}s`, css: (v) => `margin-inline-start:${v}` },
        { name: (n) => `${n}e`, css: (v) => `margin-inline-end:${v}` },
    ],
    width: [
        { name: (n) => n, css: (v) => `width:${v}` },
        { name: (n) => `min-${n}`, css: (v) => `min-width:${v}` },
        { name: (n) => `max-${n}`, css: (v) => `max-width:${v}` },
    ],
    height: [
        { name: (n) => n, css: (v) => `height:${v}` },
        { name: (n) => `min-${n}`, css: (v) => `min-height:${v}` },
        { name: (n) => `max-${n}`, css: (v) => `max-height:${v}` },
    ],
    size: [{ name: (n) => n, css: (v) => `height:${v};width:${v}` }],
    border: [
        { name: (n) => n, css: (v) => `border:${v}` },
        { name: (n) => `${n}-t`, css: (v) => `border-top:${v}` },
        { name: (n) => `${n}-r`, css: (v) => `border-right:${v}` },
        { name: (n) => `${n}-b`, css: (v) => `border-bottom:${v}` },
        { name: (n) => `${n}-l`, css: (v) => `border-left:${v}` },
        { name: (n) => `${n}-x`, css: (v) => `border-inline:${v}` },
        { name: (n) => `${n}-y`, css: (v) => `border-block:${v}` },
        { name: (n) => `${n}-s`, css: (v) => `border-inline-start:${v}` },
        { name: (n) => `${n}-e`, css: (v) => `border-inline-end:${v}` },
    ],
    "border-width": [
        { name: (n) => n, css: (v) => `border-width:${v}` },
        { name: (n) => `${n}-t`, css: (v) => `border-top-width:${v}` },
        { name: (n) => `${n}-r`, css: (v) => `border-right-width:${v}` },
        { name: (n) => `${n}-b`, css: (v) => `border-bottom-width:${v}` },
        { name: (n) => `${n}-l`, css: (v) => `border-left-width:${v}` },
        { name: (n) => `${n}-x`, css: (v) => `border-inline-width:${v}` },
        { name: (n) => `${n}-y`, css: (v) => `border-block-width:${v}` },
        { name: (n) => `${n}-s`, css: (v) => `border-inline-start-width:${v}` },
        { name: (n) => `${n}-e`, css: (v) => `border-inline-end-width:${v}` },
    ],
    "border-radius": [
        { name: (n) => n, css: (v) => `border-radius:${v}` },
        { name: (n) => `${n}-t`, css: (v) => `border-top-left-radius:${v};border-top-right-radius:${v}` },
        { name: (n) => `${n}-r`, css: (v) => `border-top-right-radius:${v};border-bottom-right-radius:${v}` },
        { name: (n) => `${n}-b`, css: (v) => `border-bottom-right-radius:${v};border-bottom-left-radius:${v}` },
        { name: (n) => `${n}-l`, css: (v) => `border-top-left-radius:${v};border-bottom-left-radius:${v}` },
        { name: (n) => `${n}-tl`, css: (v) => `border-top-left-radius:${v}` },
        { name: (n) => `${n}-tr`, css: (v) => `border-top-right-radius:${v}` },
        { name: (n) => `${n}-br`, css: (v) => `border-bottom-right-radius:${v}` },
        { name: (n) => `${n}-bl`, css: (v) => `border-bottom-left-radius:${v}` },
        { name: (n) => `${n}-s`, css: (v) => `border-start-start-radius:${v};border-start-end-radius:${v}` },
        { name: (n) => `${n}-e`, css: (v) => `border-end-start-radius:${v};border-end-end-radius:${v}` },
    ],
    blur: [{ name: (n) => n, css: (v) => `filter:blur(${v})` }],
    "backdrop-blur": [{ name: (n) => n, css: (v) => `backdrop-filter:blur(${v})` }],
    "box-shadow": [{ name: (n) => n, css: (v) => `box-shadow:${v}` }],
    "font-size": [{ name: (n) => n, css: (v) => `font-size:${v}` }],
    "line-height": [{ name: (n) => n, css: (v) => `line-height:${v}` }],
    "letter-spacing": [{ name: (n) => n, css: (v) => `letter-spacing:${v}` }],
    "font-weight": [{ name: (n) => n, css: (v) => `font-weight:${v}` }],
    "font-family": [{ name: (n) => n, css: (v) => `font-family:${v}` }],
    "text-transform": [{ name: (n) => n, css: (v) => `text-transform:${v}` }],
    "text-decoration": [{ name: (n) => n, css: (v) => `text-decoration:${v}` }],
    "text-align": [{ name: (n) => n, css: (v) => `text-align:${v}` }],
    "vertical-align": [{ name: (n) => n, css: (v) => `vertical-align:${v}` }],
    "white-space": [{ name: (n) => n, css: (v) => `white-space:${v}` }],
    "word-break": [{ name: (n) => n, css: (v) => `word-break:${v}` }],
    "word-wrap": [{ name: (n) => n, css: (v) => `word-wrap:${v}` }],
    "text-overflow": [{ name: (n) => n, css: (v) => `text-overflow:${v}` }],
    "overflow-wrap": [{ name: (n) => n, css: (v) => `overflow-wrap:${v}` }],
    "background-color": [{ name: (n) => n, css: (v) => `background-color:${v}` }],
    color: [{ name: (n) => n, css: (v) => `color:${v}` }],
    opacity: [{ name: (n) => n, css: (v) => `opacity:${v}` }],
    "z-index": [{ name: (n) => n, css: (v) => `z-index:${v}` }],
    "box-sizing": [{ name: (n) => n, css: (v) => `box-sizing:${v}` }],
    "flex-direction": [{ name: (n) => n, css: (v) => `flex-direction:${v}` }],
    "flex-wrap": [{ name: (n) => n, css: (v) => `flex-wrap:${v}` }],
    "flex-flow": [{ name: (n) => n, css: (v) => `flex-flow:${v}` }],
    "justify-content": [{ name: (n) => n, css: (v) => `justify-content:${v}` }],
    "align-items": [{ name: (n) => n, css: (v) => `align-items:${v}` }],
    "align-content": [{ name: (n) => n, css: (v) => `align-content:${v}` }],
    "align-self": [{ name: (n) => n, css: (v) => `align-self:${v}` }],
    "place-content": [{ name: (n) => n, css: (v) => `place-content:${v}` }],
    "place-items": [{ name: (n) => n, css: (v) => `place-items:${v}` }],
    "place-self": [{ name: (n) => n, css: (v) => `place-self:${v}` }],
    gap: [{ name: (n) => n, css: (v) => `gap:${v}` }],
    inset: [{ name: (n) => n, css: (v) => `inset:${v}` }],
    top: [{ name: (n) => n, css: (v) => `top:${v}` }],
    left: [{ name: (n) => n, css: (v) => `left:${v}` }],
    right: [{ name: (n) => n, css: (v) => `right:${v}` }],
    bottom: [{ name: (n) => n, css: (v) => `bottom:${v}` }],
    transform: [{ name: (n) => n, css: (v) => `transform:${v}` }],
    "transform-origin": [{ name: (n) => n, css: (v) => `transform-origin:${v}` }],
    transition: [{ name: (n) => n, css: (v) => `transition:${v}` }],
    "transition-property": [{ name: (n) => n, css: (v) => `transition-property:${v}` }],
    content: [{ name: (n) => n, css: (v) => `content:${v}` }],
    "counter-reset": [{ name: (n) => n, css: (v) => `counter-reset:${v}` }],
    "counter-increment": [{ name: (n) => n, css: (v) => `counter-increment:${v}` }],
    "grid-template-columns": [{ name: (n) => n, css: (v) => `grid-template-columns:${v}` }],
    "grid-template-rows": [{ name: (n) => n, css: (v) => `grid-template-rows:${v}` }],
    "grid-template-areas": [{ name: (n) => n, css: (v) => `grid-template-areas:${v}` }],
    "grid-template": [{ name: (n) => n, css: (v) => `grid-template:${v}` }],
    "grid-auto-columns": [{ name: (n) => n, css: (v) => `grid-auto-columns:${v}` }],
    "grid-auto-rows": [{ name: (n) => n, css: (v) => `grid-auto-rows:${v}` }],
    "grid-auto-flow": [{ name: (n) => n, css: (v) => `grid-auto-flow:${v}` }],
    grid: [{ name: (n) => n, css: (v) => `grid:${v}` }],
    "grid-column-start": [{ name: (n) => n, css: (v) => `grid-column-start:${v}` }],
    "grid-column-end": [{ name: (n) => n, css: (v) => `grid-column-end:${v}` }],
    "grid-row-start": [{ name: (n) => n, css: (v) => `grid-row-start:${v}` }],
    "grid-row-end": [{ name: (n) => n, css: (v) => `grid-row-end:${v}` }],
    "grid-column": [{ name: (n) => n, css: (v) => `grid-column:${v}` }],
    "grid-row": [{ name: (n) => n, css: (v) => `grid-row:${v}` }],
    "grid-area": [{ name: (n) => n, css: (v) => `grid-area:${v}` }],
    "justify-items": [{ name: (n) => n, css: (v) => `justify-items:${v}` }],
    "justify-self": [{ name: (n) => n, css: (v) => `justify-self:${v}` }],
    brightness: [{ name: (n) => n, css: (v) => `filter:brightness(${v})` }],
    contrast: [{ name: (n) => n, css: (v) => `filter:contrast(${v})` }],
    grayscale: [{ name: (n) => n, css: (v) => `filter:grayscale(${v})` }],
    "hue-rotate": [{ name: (n) => n, css: (v) => `filter:hue-rotate(${v})` }],
    invert: [{ name: (n) => n, css: (v) => `filter:invert(${v})` }],
    saturate: [{ name: (n) => n, css: (v) => `filter:saturate(${v})` }],
    sepia: [{ name: (n) => n, css: (v) => `filter:sepia(${v})` }],
    "drop-shadow": [{ name: (n) => n, css: (v) => `filter:drop-shadow(${v})` }],
    "backdrop-filter": [{ name: (n) => n, css: (v) => `backdrop-filter:${v}` }],
    "backdrop-brightness": [{ name: (n) => n, css: (v) => `backdrop-filter:brightness(${v})` }],
    "backdrop-contrast": [{ name: (n) => n, css: (v) => `backdrop-filter:contrast(${v})` }],
    "backdrop-grayscale": [{ name: (n) => n, css: (v) => `backdrop-filter:grayscale(${v})` }],
    "backdrop-hue-rotate": [{ name: (n) => n, css: (v) => `backdrop-filter:hue-rotate(${v})` }],
    "backdrop-invert": [{ name: (n) => n, css: (v) => `backdrop-filter:invert(${v})` }],
    "backdrop-saturate": [{ name: (n) => n, css: (v) => `backdrop-filter:saturate(${v})` }],
    "backdrop-sepia": [{ name: (n) => n, css: (v) => `backdrop-filter:sepia(${v})` }],
    "backdrop-drop-shadow": [{ name: (n) => n, css: (v) => `backdrop-filter:drop-shadow(${v})` }],
    "scrollbar-width": [{ name: (n) => n, css: (v) => `scrollbar-width:${v}` }],
    "scrollbar-color": [{ name: (n) => n, css: (v) => `scrollbar-color:${v}` }],
    "scrollbar-track-color": [{ name: (n) => n, css: (v) => `scrollbar-track-color:${v}` }],
    "scrollbar-thumb-color": [{ name: (n) => n, css: (v) => `scrollbar-thumb-color:${v}` }],
    "scrollbar-thumb-width": [{ name: (n) => n, css: (v) => `scrollbar-thumb-width:${v}` }],
    "scrollbar-thumb-height": [{ name: (n) => n, css: (v) => `scrollbar-thumb-height:${v}` }],
    "scrollbar-thumb-radius": [{ name: (n) => n, css: (v) => `scrollbar-thumb-radius:${v}` }],
    "scrollbar-thumb-background": [{ name: (n) => n, css: (v) => `scrollbar-thumb-background:${v}` }],
    animation: [{ name: (n) => n, css: (v) => `animation:${v}` }],
    "animation-name": [{ name: (n) => n, css: (v) => `animation-name:${v}` }],
    "animation-duration": [{ name: (n) => n, css: (v) => `animation-duration:${v}` }],
    "animation-timing-function": [{ name: (n) => n, css: (v) => `animation-timing-function:${v}` }],
    "animation-delay": [{ name: (n) => n, css: (v) => `animation-delay:${v}` }],
    "animation-iteration-count": [{ name: (n) => n, css: (v) => `animation-iteration-count:${v}` }],
    "animation-direction": [{ name: (n) => n, css: (v) => `animation-direction:${v}` }],
    "animation-fill-mode": [{ name: (n) => n, css: (v) => `animation-fill-mode:${v}` }],
    "animation-play-state": [{ name: (n) => n, css: (v) => `animation-play-state:${v}` }],
    "animation-timeline": [{ name: (n) => n, css: (v) => `animation-timeline:${v}` }],
    "animation-frames": [{ name: (n) => n, css: (v) => `animation-frames:${v}` }],
    "animation-frames-name": [{ name: (n) => n, css: (v) => `animation-frames-name:${v}` }],
    "animation-frames-duration": [{ name: (n) => n, css: (v) => `animation-frames-duration:${v}` }],
    "animation-frames-timing-function": [{ name: (n) => n, css: (v) => `animation-frames-timing-function:${v}` }],
    "animation-frames-delay": [{ name: (n) => n, css: (v) => `animation-frames-delay:${v}` }],
    "transition-duration": [{ name: (n) => n, css: (v) => `transition-duration:${v}` }],
    "transition-timing-function": [{ name: (n) => n, css: (v) => `transition-timing-function:${v}` }],
    "transition-delay": [{ name: (n) => n, css: (v) => `transition-delay:${v}` }],
};
export const funcPerformance = async (func, args) => {
    const start = performance.now();
    await func(...args);
    const end = performance.now();
    console.log(`${func.name}: ${(end - start).toString().slice(0, 4)} ms`);
};
